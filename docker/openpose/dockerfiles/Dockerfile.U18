ARG BASE_IMAGE=nvidia/cuda:10.2-cudnn7-devel-ubuntu18.04

FROM ${BASE_IMAGE}

ENV LANG en_US.UTF-8
ENV TZ=Europe/Berlin
ENV DEBIAN_FRONTEND=noninteractive

# ------------------------------------------------------------------------------
# Main apts 
# ------------------------------------------------------------------------------
RUN rm /etc/apt/sources.list.d/cuda.list && \
    rm /etc/apt/sources.list.d/nvidia-ml.list && \
    rm -rf /var/lib/apt/lists/* && \
    apt-get update && \
    apt-get install -y --no-install-recommends \	
        sudo \
        nano \
        unzip \
        wget \
        curl \
        git \
        tzdata \
        ssh

RUN wget https://github.com/Kitware/CMake/releases/download/v3.25.3/cmake-3.25.3-Linux-x86_64.tar.gz && \
    tar xzf cmake-3.25.3-Linux-x86_64.tar.gz -C /opt && \
    rm cmake-3.25.3-Linux-x86_64.tar.gz && \
    ln -s /opt/cmake-3.25.3-linux-x86_64/bin/cmake /usr/local/bin/ && \
    ln -s /opt/cmake-3.25.3-linux-x86_64/bin/ccmake /usr/local/bin/

# ------------------------------------------------------------------------------
# Python 3.8
# ------------------------------------------------------------------------------
RUN apt-get install -y software-properties-common && \
    add-apt-repository -y ppa:deadsnakes/ppa && \
    apt-get update -y && \
    apt-get install -y --no-install-recommends \
        python3.8 \
        python3.8-dev \
        python3.8-distutils \
        python3.8-tk && \
    update-alternatives --install \
        /usr/bin/python3 \
        python3 \
        /usr/bin/python3.8 2; exit 0
## Keeps Python from generating .pyc files in the container
ENV PYTHONDONTWRITEBYTECODE=1
## Turns off buffering for easier container logging
ENV PYTHONUNBUFFERED=1

# ------------------------------------------------------------------------------
# Apt libraries
# ------------------------------------------------------------------------------
# ffmpeg is for video generation
RUN apt-get install -y \
    libprotobuf-dev \
    protobuf-compiler \
    libgoogle-glog-dev \
    libboost-all-dev \
    libhdf5-dev \
    libatlas-base-dev \
    libopencv-dev \
    ffmpeg  

# ------------------------------------------------------------------------------
# pip
# ------------------------------------------------------------------------------
COPY ./requirements /tmp/requirements
RUN curl https://bootstrap.pypa.io/get-pip.py -o /tmp/get-pip.py && \
    python3 /tmp/get-pip.py && \
    python3 -m pip install -r /tmp/requirements/main.txt && \
    python3 -m pip install -r /tmp/requirements/extra.txt && \
    python3 -m pip install -r /tmp/requirements/devel.txt

# ------------------------------------------------------------------------------
# Install openpose
# ------------------------------------------------------------------------------
# Based on : https://github.com/esemeniuc/openpose-docker/blob/master/Dockerfile
# and : https://hub.docker.com/r/cwaffles/openpose
RUN git clone https://github.com/cheneeheng/openpose.git /usr/local/src/openpose
WORKDIR /usr/local/src/openpose/build
# 7.5 = for turing architecture
RUN cmake \
    -DDOWNLOAD_BODY_25_MODEL:Bool=ON \
    -DDOWNLOAD_BODY_COCO_MODEL:Bool=ON \
    -DDOWNLOAD_BODY_MPI_MODEL:Bool=ON \
    -DDOWNLOAD_FACE_MODEL:Bool=OFF \
    -DDOWNLOAD_HAND_MODEL:Bool=OFF \
    -DINSTRUCTION_SET:String=AVX2 \
    -DCUDA_ARCH:String=Manual \
    -DCUDA_ARCH_BIN:String="5.3 6.0 6.1 7.0 7.5" \
    -DCUDA_ARCH_PTX:String="7.5" \
    -DUSE_CUDNN:Bool=ON \
    -DBUILD_PYTHON:Bool=ON \
    -DPYTHON_EXECUTABLE:String="/usr/bin/python3.8" \
    -DBUILD_EXAMPLES:Bool=OFF \
    .. && \
    make -j$(($(nproc) - 1))

RUN cd python/openpose && \
    make && \
    cp ./pyopenpose.cpython-38-x86_64-linux-gnu.so /usr/local/lib/python3.8/dist-packages && \
    ln -s ./pyopenpose.cpython-38-x86_64-linux-gnu.so /usr/local/lib/python3.8/dist-packages/pyopenpose
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/src/openpose/build/python/openpose"

RUN python3 -m pip install git+https://github.com/cheneeheng/cython_bbox.git

WORKDIR /code
