FROM nvidia/cuda:11.5.2-cudnn8-devel-ubuntu20.04

ENV LANG en_US.UTF-8

ARG UNAME_ARG
ARG UID_ARG

# ------------------------------------------------------------------------------
# Main apts 
RUN apt-get update -y
RUN apt-get install -y sudo nano unzip wget curl git 

ENV TZ=Europe/Berlin
RUN DEBIAN_FRONTEND="noninteractive" apt-get -y install tzdata

# ------------------------------------------------------------------------------
# Python 3.8
RUN apt-get install -y python3.8 python3.8-dev && \
    ln -s /usr/bin/python3.8 /usr/bin/python && \
    ln -s /usr/bin/python3.8 /usr/bin/python3 && \
    apt-get install -y python3-pip python3-tk
## Keeps Python from generating .pyc files in the container
ENV PYTHONDONTWRITEBYTECODE=1
## Turns off buffering for easier container logging
ENV PYTHONUNBUFFERED=1

# ------------------------------------------------------------------------------
# Apt libraries
RUN apt-get install -y \
    libprotobuf-dev \
    protobuf-compiler \
    libgoogle-glog-dev \
    libboost-all-dev \
    libhdf5-dev \
    libatlas-base-dev \
    libopencv-dev

# OpenCV Apts
RUN apt-get install -y \
    ffmpeg \
    net-tools \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libavcodec-dev \
    libavformat-dev\
    libswscale-dev \
    libavresample-dev \
    libgstreamer1.0-dev \
    libgstreamer-plugins-base1.0-dev \
    libxvidcore-dev \
    x264 \
    libx264-dev \
    libfaac-dev \
    libmp3lame-dev \
    libtheora-dev \
    libfaac-dev \
    libmp3lame-dev \
    libvorbis-dev \
    libopencore-amrnb-dev \
    libopencore-amrwb-dev

RUN apt-get install -y \
    libdc1394-22 \
    libdc1394-22-dev \
    libxine2-dev libv4l-dev \
    v4l-utils
RUN cd /usr/include/linux
RUN ln -s -f ../libv4l1-videodev.h videodev.h
RUN cd -

# OpenCV optionals
RUN apt-get install -y \
    libgtk-3-dev \
    libtbb-dev \
    libatlas-base-dev \
    gfortran \
    libeigen3-dev\
    intel-mkl

# ------------------------------------------------------------------------------
# pip
WORKDIR /tmp
COPY ./requirements/requirements_openpose.txt /tmp
RUN python3 -m pip install -r /tmp/requirements_openpose.txt

# ------------------------------------------------------------------------------
# Compiling OpenPOSE
# TAKEN FROM : https://github.com/esemeniuc/openpose-docker/blob/master/Dockerfile
# and : https://hub.docker.com/r/cwaffles/openpose

#replace cmake as old version has CUDA variable bugs
RUN wget https://github.com/Kitware/CMake/releases/download/v3.21.1/cmake-3.21.1-Linux-x86_64.tar.gz && \
    tar xzf cmake-3.21.1-Linux-x86_64.tar.gz -C /opt && \
    rm cmake-3.21.1-Linux-x86_64.tar.gz
ENV PATH="/opt/cmake-3.21.1-linux-x86_64/bin:${PATH}"

WORKDIR /usr/local/src/openpose
RUN git clone https://github.com/CMU-Perceptual-Computing-Lab/openpose.git .
WORKDIR /usr/local/src/openpose/build
RUN cmake \
    -D DOWNLOAD_BODY_25_MODEL=ON \
    -D DOWNLOAD_BODY_COCO_MODEL=ON \
    -D DOWNLOAD_BODY_MPI_MODEL=ON \
    -D DOWNLOAD_FACE_MODEL=OFF \
    -D DOWNLOAD_HAND_MODEL=OFF \ 
    -D CUDA_ARCH=Manual \
    -D CUDA_ARCH_BIN="5.3 6.0 6.1 7.0 7.5" \
    -D CUDA_ARCH_PTX="7.5" \ 
    -D BUILD_PYTHON=ON \
    -D PYTHON_EXECUTABLE="/usr/bin/python3.8" \
    -D PYTHON_LIBRARY="/usr/lib/x86_64-linux-gnu/libpython3.8m.so" ..
RUN make -j8

WORKDIR /usr/local/src/openpose/build/python/openpose
RUN make install

RUN cp ./pyopenpose.cpython-38-x86_64-linux-gnu.so /usr/local/lib/python3.8/dist-packages
RUN ln -s /usr/local/lib/python3.8/dist-packages/pyopenpose.cpython-38-x86_64-linux-gnu.so /usr/local/lib/python3.8/dist-packages/pyopenpose
ENV LD_LIBRARY_PATH="${LD_LIBRARY_PATH}:/usr/local/src/openpose/build/python/openpose"

# ------------------------------------------------------------------------------
# Compiling OpenCV
RUN mkdir -p /usr/local/src/opencv
WORKDIR /usr/local/src/opencv
RUN wget -O opencv.zip https://github.com/opencv/opencv/archive/4.5.5.zip
RUN wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.5.5.zip
RUN unzip opencv.zip
RUN unzip opencv_contrib.zip
RUN mv opencv-4.5.5 opencv
RUN mv opencv_contrib-4.5.5 opencv_contrib
RUN mkdir -p /usr/local/src/opencv/opencv/build
WORKDIR /usr/local/src/opencv/opencv/build
RUN cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D INSTALL_PYTHON_EXAMPLES=ON \
    -D INSTALL_C_EXAMPLES=OFF \
    -D BUILD_EXAMPLES=ON \
    -D ENABLE_FAST_MATH=ON \
    -D MKL_LAPACKE_INCLUDE_DIR=/usr/include/mkl \
    -D MKL_ROOT_DIR=/usr/lib/x86_64-linux-gnu/mkl \ 
    -D MKL_WITH_TBB=ON \
    -D MKL_USE_SINGLE_DYNAMIC_LIBRARY=ON \ 
    -D OPENCV_DNN_CUDA=ON \
    -D OPENCV_ENABLE_NONFREE=ON \
    -D OPENCV_EXTRA_MODULES_PATH=/usr/local/src/opencv/opencv_contrib/modules \
    # -D OPENCV_PYTHON3_VERSION=ON \
    -D CUDA_FAST_MATH=ON \
    -D WITH_CUBLAS=ON \
    -D WITH_CUDA=ON \
    -D WITH_CUDNN=ON \
    -D WITH_EIGEN=ON \
    -D WITH_TBB=ON \
    -D WITH_LIBREALSENSE=ON \
    -D WITH_V4L=ON \
    -D WITH_QT=OFF \
    # -D WITH_OPENGL=ON \
    -D WITH_GSTREAMER=ON \
    -D PYTHON_EXECUTABLE=/usr/bin/python \
    .. 2>&1 | tee output.log
RUN make -j8
RUN make install 
RUN ldconfig

# ------------------------------------------------------------------------------
# pytorch
RUN pip install torch==1.11.0+cu115 torchvision==0.12.0+cu115 -f https://download.pytorch.org/whl/cu115/torch_stable.html

# ------------------------------------------------------------------------------
# Creates a non-root user with an explicit UID and adds permission to access the /app folder
# For more info, please refer to https://aka.ms/vscode-docker-python-configure-containers
RUN adduser -u ${UID_ARG} --disabled-password --gecos "" ${UNAME_ARG}
RUN echo "${UNAME_ARG}:${UNAME_ARG}" | chpasswd 
RUN usermod -aG sudo ${UNAME_ARG}
USER ${UNAME_ARG}

WORKDIR /code
